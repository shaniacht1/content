args:
- description: Question message to send to the team member
  name: message
  required: true
- auto: PREDEFINED
  description: Indicates whether to use one-time entitlement or a persistent one
  name: persistent
  predefined:
  - "true"
  - "false"
- defaultValue: "yes"
  description: First option for the team member reply.
  name: option1
- defaultValue: "no"
  description: Second option for the team member reply.
  name: option2
- description: A comma delimited list of additional options (in case more than 2 options
    are needed)
  name: additional_options
- default: true
  description: Team member to ask
  name: team_member
  required: true
- description: Playbook Task ID close with the reply. If none provide, no playbook
    task will be closed.
  name: task_id
comment: Ask a user a question on Microsoft Teams and expect a response. The response
  can also close a task (might be conditional) in a playbook.
commonfields:
  id: MicrosoftTeamsAsk
  version: -1
dependson:
  must:
  - Microsoft Teams|||send-notification
dockerimage: demisto/python3:3.7.4.1150
name: MicrosoftTeamsAsk
runonce: false
script: |2-





  def main():
      script_arguments: dict = demisto.args()
      persistent: bool = script_arguments.get('persistent', '') == 'true'
      response: list = demisto.executeCommand('addEntitlement', {'persistent': persistent})
      if isError(response[0]):
          demisto.results(response)
          return

      entitlement: str = response[0]['Contents']
      investigation_id: str = demisto.investigation()['id']
      task_id: str = script_arguments.get('task_id', '')
      message_text: str = script_arguments.get('message', '')

      first_option: str = script_arguments.get('option1', '')
      second_option: str = script_arguments.get('option2', '')
      options: list = [first_option, second_option]
      additional_options: list = argToList(script_arguments.get('additional_options'))
      options.extend(additional_options)

      message: dict = {
          'message_text': message_text,
          'options': options,
          'entitlement': entitlement,
          'investigation_id': investigation_id,
          'task_id': task_id
      }

      command_arguments: dict = {
          'team_member': script_arguments.get('team_member'),
          'message': json.dumps(message),
          'using-brand': 'Microsoft Teams'
      }

      demisto.results(demisto.executeCommand('send-notification', command_arguments))


  if __name__ == 'builtins':
      main()
scripttarget: 0
subtype: python3
system: true
tags:
- microsoftteams
type: python
